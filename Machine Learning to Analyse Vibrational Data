#SVM with K-means Clustering
#Contains 5 fold cross validation

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_predict, KFold
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

file_path = 'Aggregate data for surfaces (120 each).csv'
df = pd.read_csv(file_path)

# Filling NaN values with mean for numerical columns
numeric_cols = df.select_dtypes(include=[np.number]).columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())

# Standardizing the numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df[numeric_cols])

# Applying K-Means clustering
optimal_num_clusters = 2  # Placeholder for the optimal number of clusters
kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Including cluster labels with the features
X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))
y = df['Road_Surface_Type'].values

# Setting up 5-fold cross-validation
kf = KFold(n_splits=5, shuffle=True, random_state=42)

# Predicting across each fold using cross-validation
y_pred = cross_val_predict(SVC(random_state=42), X_with_clusters, y, cv=kf)

# Calculating and printing accuracy
accuracy = accuracy_score(y, y_pred)
print(f"Cross-validated accuracy: {accuracy}")

# Generating and plotting the confusion matrix
conf_matrix = confusion_matrix(y, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues")
plt.title('Confusion Matrix for SVM Classifier Using 5-Fold Cross-Validation')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()
