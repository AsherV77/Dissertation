{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPoFKea8HEudvZQUCfyun9k",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AsherV77/Dissertation/blob/main/K_means_clustering_and_SVM.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Machine Learning models developed for my dissertation\n",
        "# Here is all the different iterations of SVM + K-means clustering models I used, testing with different data splitting, tuning and post processing steps\n",
        "# to get the optimal accuracy and runtime, aiming for a model capable of real-time and accurate analysis\n",
        "\n",
        "#Code Version 0.1\n",
        "#80/20 Training/Testing split\n",
        "#No hyperparameter tuning\n",
        "#No postprocessing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Confirm the size of the dataset\n",
        "print(\"Full dataset size:\", df.shape)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Creating a copy of the dataframe to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# K-Means Clustering with the specified number of clusters\n",
        "optimal_num_clusters = 3  # Using the specified optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# Update X_scaled to include the cluster labels for the model training\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "\n",
        "# SVM Classification with default parameters\n",
        "y = df['Road_Surface_Type']\n",
        "\n",
        "# 80/20 train/test split ensuring all data is used\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_with_clusters, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Confirm the size of train and test sets\n",
        "print(\"Training set size:\", X_train.shape)\n",
        "print(\"Testing set size:\", X_test.shape)\n",
        "\n",
        "# Train the SVM model\n",
        "svm_model = SVC(random_state=42)\n",
        "svm_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test set with the SVM model\n",
        "y_pred = svm_model.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy on the test set\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Test Set Accuracy: {accuracy}\")\n",
        "\n",
        "# Confusion matrix calculation\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Confusion matrix plot\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for SVM Classifier on Test Set')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "8gkb3gEsz9J1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 633
        },
        "outputId": "39a2c2cc-8b8e-48d6-967d-7e2f1aa3bbd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Full dataset size: (480, 15)\n",
            "Training set size: (384, 14)\n",
            "Testing set size: (96, 14)\n",
            "Test Set Accuracy: 0.8958333333333334\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Code Version 0.2\n",
        "#80/20 Training/Testing split\n",
        "#Hyperparameter tuning\n",
        "#No postprocessing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Confirm the size of the dataset\n",
        "print(\"Full dataset size:\", df.shape)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Creating a copy of the dataframe to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# K-Means Clustering with the specified number of clusters\n",
        "optimal_num_clusters = 3\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# Update X_scaled to include the cluster labels for the model training\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "\n",
        "# Define the target variable\n",
        "y = df['Road_Surface_Type']\n",
        "\n",
        "# 80/20 train/test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_with_clusters, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Set up the hyperparameter grid for tuning the SVM classifier\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10, 100],  # Regularization parameter\n",
        "    'gamma': ['scale', 0.001, 0.01, 0.1, 1],  # Kernel coefficient for 'rbf', 'poly' and 'sigmoid'\n",
        "    'kernel': ['linear', 'poly', 'rbf', 'sigmoid']  # Specifies the kernel type to be used in the algorithm\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=5, verbose=2)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Print the best parameters found and the corresponding score\n",
        "print(\"Best parameters found:\", grid_search.best_params_)\n",
        "print(\"Best cross-validated score:\", grid_search.best_score_)\n",
        "\n",
        "# Train the SVM model with the best parameters\n",
        "best_svm_model = grid_search.best_estimator_\n",
        "best_svm_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test set with the best SVM model\n",
        "y_pred = best_svm_model.predict(X_test)\n",
        "\n",
        "# Calculate the accuracy on the test set\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Test Set Accuracy with the best model: {accuracy}\")\n",
        "\n",
        "# Generate the confusion matrix\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Plot the confusion matrix\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for the Best SVM Classifier on Test Set')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "vHnv0fwc4gti",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "5b552ada-33a0-4d23-ed29-dba413f076b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Full dataset size: (480, 20)\n",
            "Fitting 5 folds for each of 80 candidates, totalling 400 fits\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "Best parameters found: {'C': 100, 'gamma': 0.1, 'kernel': 'rbf'}\n",
            "Best cross-validated score: 0.9583048530416951\n",
            "Test Set Accuracy with the best model: 0.90625\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 0.3\n",
        "#Contains an 80/20 split\n",
        "#Contains postprocessing\n",
        "#NO hyperparameter tuning\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the data\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Confirm the size of the dataset\n",
        "print(\"Full dataset size:\", df.shape)\n",
        "\n",
        "# Calculate the mean of numeric columns and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Define the features\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Create a copy of the DataFrame to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize the features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Perform K-Means Clustering with the specified number of clusters\n",
        "optimal_num_clusters = 3  # Using the specified optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# Update X_scaled to include the cluster labels for the model training\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "\n",
        "# Define the target variable\n",
        "y = df['Road_Surface_Type']\n",
        "\n",
        "# Split the data into training and testing sets with an 80/20 split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_with_clusters, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Confirm the size of the training and testing sets\n",
        "print(\"Training set size:\", X_train.shape)\n",
        "print(\"Testing set size:\", X_test.shape)\n",
        "\n",
        "# Initialize and train the SVM classifier\n",
        "svm_model = SVC(random_state=42)\n",
        "svm_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the testing set using the SVM model\n",
        "y_pred = svm_model.predict(X_test)\n",
        "\n",
        "# Apply a median filter for post-processing to smooth predictions\n",
        "kernel_size = 3  # Kernel size for the median filter; you may choose to optimize this value\n",
        "y_pred_smoothed = medfilt(y_pred, kernel_size=kernel_size)\n",
        "\n",
        "# Calculate the accuracy of the model before and after post-processing\n",
        "accuracy_before = accuracy_score(y_test, y_pred)\n",
        "accuracy_after = accuracy_score(y_test, y_pred_smoothed)\n",
        "print(f\"Test Set Accuracy before post-processing: {accuracy_before}\")\n",
        "print(f\"Test Set Accuracy after post-processing: {accuracy_after}\")\n",
        "\n",
        "# Calculate the confusion matrices before and after post-processing\n",
        "conf_matrix_before = confusion_matrix(y_test, y_pred)\n",
        "conf_matrix_after = confusion_matrix(y_test, y_pred_smoothed)\n",
        "\n",
        "# Plot the confusion matrices\n",
        "fig, ax = plt.subplots(1, 2, figsize=(16, 6))\n",
        "\n",
        "# Confusion matrix before post-processing\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax[0])\n",
        "ax[0].set_title('Confusion Matrix for SVM Classifier on Test Set (Before Post-Processing)')\n",
        "ax[0].set_xlabel('Predicted Label')\n",
        "ax[0].set_ylabel('True Label')\n",
        "\n",
        "# Confusion matrix after post-processing\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax[1])\n",
        "ax[1].set_title('Confusion Matrix for SVM Classifier on Test Set (After Post-Processing)')\n",
        "ax[1].set_xlabel('Predicted Label')\n",
        "ax[1].set_ylabel('True Label')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "8vmAzz0B4h25",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 651
        },
        "outputId": "3e3c4853-1dcf-4508-8193-8a4ffe9cb4e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Full dataset size: (480, 15)\n",
            "Training set size: (384, 14)\n",
            "Testing set size: (96, 14)\n",
            "Test Set Accuracy before post-processing: 0.8958333333333334\n",
            "Test Set Accuracy after post-processing: 0.4583333333333333\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 0.4\n",
        "#80/20 Training testing split\n",
        "#Hyperparameter tuning\n",
        "#Post processing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the data\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Confirm the size of the dataset\n",
        "print(\"Full dataset size:\", df.shape)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Define the features\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Create a copy of the DataFrame to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize the features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Perform K-Means Clustering with the specified number of clusters\n",
        "optimal_num_clusters = 3\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# Update X_scaled to include the cluster labels for the model training\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "\n",
        "# Define the target variable\n",
        "y = df['Road_Surface_Type']\n",
        "\n",
        "# Split the data into training and testing sets with an 80/20 split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_with_clusters, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Set up the hyperparameter grid for tuning the SVM classifier\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10, 100],  # Regularization parameter\n",
        "    'gamma': ['scale', 0.001, 0.01, 0.1, 1],  # Kernel coefficient for 'rbf', 'poly' and 'sigmoid'\n",
        "    'kernel': ['linear', 'poly', 'rbf', 'sigmoid']  # Specifies the kernel type to be used in the algorithm\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=5, verbose=2)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Print the best parameters found and the corresponding score\n",
        "print(\"Best parameters found:\", grid_search.best_params_)\n",
        "print(\"Best cross-validated score:\", grid_search.best_score_)\n",
        "\n",
        "# Train the SVM model with the best parameters\n",
        "best_svm_model = grid_search.best_estimator_\n",
        "best_svm_model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on the test set with the best SVM model\n",
        "y_pred = best_svm_model.predict(X_test)\n",
        "\n",
        "# Apply a median filter for post-processing to smooth predictions\n",
        "kernel_size = 3  # Define the kernel size for the median filter\n",
        "y_pred_smoothed = medfilt(y_pred, kernel_size=kernel_size)\n",
        "\n",
        "# Calculate the accuracy of the model before and after post-processing\n",
        "accuracy_before = accuracy_score(y_test, y_pred)\n",
        "accuracy_after = accuracy_score(y_test, y_pred_smoothed)\n",
        "print(f\"Test Set Accuracy before post-processing: {accuracy_before}\")\n",
        "print(f\"Test Set Accuracy after post-processing: {accuracy_after}\")\n",
        "\n",
        "# Generate the confusion matrices before and after post-processing\n",
        "conf_matrix_before = confusion_matrix(y_test, y_pred)\n",
        "conf_matrix_after = confusion_matrix(y_test, y_pred_smoothed)\n",
        "\n",
        "# Plot the confusion matrices\n",
        "fig, axes = plt.subplots(1, 2, figsize=(15, 5), sharey=True)\n",
        "\n",
        "# Confusion matrix before post-processing\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\", ax=axes[0])\n",
        "axes[0].set_title('Confusion Matrix for SVM Classifier on Test Set (Before Post-Processing)')\n",
        "axes[0].set_xlabel('Predicted Label')\n",
        "axes[0].set_ylabel('True Label')\n",
        "\n",
        "# Confusion matrix after post-processing\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\", ax=axes[1])\n",
        "axes[1].set_title('Confusion Matrix for SVM Classifier on Test Set (After Post-Processing)')\n",
        "axes[1].set_xlabel('Predicted Label')\n",
        "axes[1].set_ylabel('True Label')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "x-MUpDZY7ZkB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "f53bd32d-128d-4327-e167-c1b8e34ef173"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Full dataset size: (480, 15)\n",
            "Fitting 5 folds for each of 80 candidates, totalling 400 fits\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.1s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.1s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "Best parameters found: {'C': 100, 'gamma': 0.1, 'kernel': 'rbf'}\n",
            "Best cross-validated score: 0.9583048530416951\n",
            "Test Set Accuracy before post-processing: 0.90625\n",
            "Test Set Accuracy after post-processing: 0.4583333333333333\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 1\n",
        "#Contains 5 fold cross validation\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_predict, KFold\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 2  # Placeholder for the optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Setting up 5-fold cross-validation\n",
        "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "# Predicting across each fold using cross-validation\n",
        "y_pred = cross_val_predict(SVC(random_state=42), X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Calculating and printing accuracy\n",
        "accuracy = accuracy_score(y, y_pred)\n",
        "print(f\"Cross-validated accuracy: {accuracy}\")\n",
        "\n",
        "# Generating and plotting the confusion matrix\n",
        "conf_matrix = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for SVM Classifier Using 5-Fold Cross-Validation')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "fEiBmtaV-OQw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "outputId": "618ded03-ff70-4794-89b3-f462ca4f8782"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validated accuracy: 0.98125\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 1.1\n",
        "#Contains 5 fold cross validation\n",
        "#Contains hyperparameter tuning\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_predict, KFold, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 3  # Placeholder for the optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Define the parameter grid for hyperparameter tuning\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10, 100],\n",
        "    'gamma': ['scale', 0.001, 0.01, 0.1, 1],\n",
        "    'kernel': ['linear', 'poly', 'rbf', 'sigmoid']\n",
        "}\n",
        "\n",
        "# Setting up 5-fold cross-validation\n",
        "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=kf, verbose=2, scoring='accuracy')\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_with_clusters, y)\n",
        "\n",
        "# Best parameters and score\n",
        "print(\"Best parameters found:\", grid_search.best_params_)\n",
        "print(\"Best cross-validated score:\", grid_search.best_score_)\n",
        "\n",
        "# Using the best estimator found to predict across each fold using cross-validation\n",
        "y_pred = cross_val_predict(grid_search.best_estimator_, X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Calculating and printing accuracy\n",
        "accuracy = accuracy_score(y, y_pred)\n",
        "print(f\"Cross-validated accuracy: {accuracy}\")\n",
        "\n",
        "# Generating and plotting the confusion matrix\n",
        "conf_matrix = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for SVM Classifier After Hyperparameter Tuning')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "-B0uKoQ1-Yay",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "38ae5a50-b445-489f-cede-0617402e6e7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 80 candidates, totalling 400 fits\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=10, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=scale, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=scale, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=scale, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=scale, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END ........................C=100, gamma=1, kernel=poly; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.0s\n",
            "Best parameters found: {'C': 1, 'gamma': 'scale', 'kernel': 'linear'}\n",
            "Best cross-validated score: 1.0\n",
            "Cross-validated accuracy: 1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Code Version 1.2\n",
        "#5 fold cross validation\n",
        "#Post processing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_predict, KFold\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 3  # Placeholder for the optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Setting up 5-fold cross-validation\n",
        "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "# Predicting across each fold using cross-validation\n",
        "y_pred = cross_val_predict(SVC(random_state=42), X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Post-processing with a median filter\n",
        "y_pred_smoothed = medfilt(y_pred, kernel_size=3)\n",
        "\n",
        "# Calculating and printing accuracy before and after post-processing\n",
        "accuracy_before = accuracy_score(y, y_pred)\n",
        "accuracy_after = accuracy_score(y, y_pred_smoothed)\n",
        "print(f\"Cross-validated accuracy before post-processing: {accuracy_before}\")\n",
        "print(f\"Cross-validated accuracy after post-processing: {accuracy_after}\")\n",
        "\n",
        "# Generating and plotting the confusion matrix before post-processing\n",
        "conf_matrix_before = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix Before Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "# Generating and plotting the confusion matrix after post-processing\n",
        "conf_matrix_after = confusion_matrix(y, y_pred_smoothed)\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix After Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "AzduJATi_FpM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "9ab46808-7cf2-478e-b139-6d6284a84e90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validated accuracy before post-processing: 0.98125\n",
            "Cross-validated accuracy after post-processing: 0.9958333333333333\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Code version 1.3\n",
        "#5 fold cross validation\n",
        "#post processing\n",
        "#hyperparameter tuning\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import KFold, GridSearchCV, cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 3\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Setting up 5-fold cross-validation\n",
        "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "# Hyperparameter grid\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10, 100],\n",
        "    'gamma': [1, 0.1, 0.01, 0.001],\n",
        "    'kernel': ['rbf', 'linear']\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=kf, scoring='accuracy', verbose=1)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_with_clusters, y)\n",
        "\n",
        "# Retrieve the best parameters and model\n",
        "best_params = grid_search.best_params_\n",
        "best_model = grid_search.best_estimator_\n",
        "\n",
        "print(f\"Best parameters found: {best_params}\")\n",
        "\n",
        "# Predicting across each fold using the best model\n",
        "y_pred = cross_val_predict(best_model, X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Post-processing with a median filter\n",
        "y_pred_smoothed = medfilt(y_pred, kernel_size=3)\n",
        "\n",
        "# Calculating and printing accuracy before and after post-processing\n",
        "accuracy_before = accuracy_score(y, y_pred)\n",
        "accuracy_after = accuracy_score(y, y_pred_smoothed)\n",
        "print(f\"Cross-validated accuracy before post-processing: {accuracy_before}\")\n",
        "print(f\"Cross-validated accuracy after post-processing: {accuracy_after}\")\n",
        "\n",
        "# Generating and plotting the confusion matrix before post-processing\n",
        "conf_matrix_before = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix Before Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "# Generating and plotting the confusion matrix after post-processing\n",
        "conf_matrix_after = confusion_matrix(y, y_pred_smoothed)\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix After Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 576
        },
        "id": "vDGdXPPH_JZz",
        "outputId": "a7a59543-d7d7-48c8-d2ce-c2f1d7904be8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 32 candidates, totalling 160 fits\n",
            "Best parameters found: {'C': 1, 'gamma': 1, 'kernel': 'linear'}\n",
            "Cross-validated accuracy before post-processing: 1.0\n",
            "Cross-validated accuracy after post-processing: 1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Code version 1.3\n",
        "#5 fold cross validation\n",
        "#post processing\n",
        "#hyperparameter tuning\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import KFold, GridSearchCV, cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 2\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Setting up 5-fold cross-validation\n",
        "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "# Hyperparameter grid\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10, 100],\n",
        "    'gamma': [1, 0.1, 0.01, 0.001],\n",
        "    'kernel': ['rbf', 'linear']\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object\n",
        "grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=kf, scoring='accuracy', verbose=1)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_with_clusters, y)\n",
        "\n",
        "# Retrieve the best parameters and model\n",
        "best_params = grid_search.best_params_\n",
        "best_model = grid_search.best_estimator_\n",
        "\n",
        "print(f\"Best parameters found: {best_params}\")\n",
        "\n",
        "# Predicting across each fold using the best model\n",
        "y_pred = cross_val_predict(best_model, X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Post-processing with a median filter\n",
        "y_pred_smoothed = medfilt(y_pred, kernel_size=3)\n",
        "\n",
        "# Calculating and printing accuracy before and after post-processing\n",
        "accuracy_before = accuracy_score(y, y_pred)\n",
        "accuracy_after = accuracy_score(y, y_pred_smoothed)\n",
        "print(f\" accuracy: {accuracy_before}\")\n",
        "\n",
        "\n",
        "# Generating and plotting the confusion matrix before post-processing\n",
        "conf_matrix_before = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix Before Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "# Generating and plotting the confusion matrix after post-processing\n",
        "conf_matrix_after = confusion_matrix(y, y_pred_smoothed)\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix After Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "NAACEAAP9vpL",
        "outputId": "f8398813-4dd4-4281-e766-973df2484fc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 32 candidates, totalling 160 fits\n",
            "Best parameters found: {'C': 1, 'gamma': 1, 'kernel': 'linear'}\n",
            " accuracy: 1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Code version 1.3\n",
        "#5 fold cross validation\n",
        "#post processing\n",
        "#hyperparameter tuning\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import KFold, GridSearchCV, cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, silhouette_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Determine the optimal number of clusters using Elbow Method\n",
        "wcss = []  # within-cluster sum of squares\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)\n",
        "    kmeans.fit(X_scaled)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(range(1, 11), wcss, marker='o')\n",
        "plt.title('Elbow Method For Optimal Clusters')\n",
        "plt.xlabel('Number of Clusters (K)')\n",
        "plt.ylabel('Within-Cluster Sum of Squares (WCSS)')\n",
        "plt.show()\n",
        "\n",
        "# Silhouette analysis to determine the quality of clusters\n",
        "silhouette_scores = []\n",
        "for i in range(2, 11):  # silhouette score is not defined for 1 cluster\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)\n",
        "    clusters = kmeans.fit_predict(X_scaled)\n",
        "    score = silhouette_score(X_scaled, clusters)\n",
        "    silhouette_scores.append(score)\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(range(2, 11), silhouette_scores, marker='o')\n",
        "plt.title('Silhouette Scores For Various Clusters')\n",
        "plt.xlabel('Number of Clusters (K)')\n",
        "plt.ylabel('Silhouette Score')\n",
        "plt.show()\n",
        "\n",
        "# Proceed with clustering at determined optimal cluster number\n",
        "optimal_num_clusters = 3  #assumed optimal from analysis\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Include cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Other processing and model fitting steps continue here as before\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 957
        },
        "id": "NTzsPv42kpaX",
        "outputId": "58b88fee-5b39-4d59-edfe-b9f1ad4ced06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "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u2LY0sKdO3fg6elp7DKIiIiIiKiaSEpKQv369R85hmFLC7a2tgBKP1CZTGbkaoiIiIiIyFiUSiU8PT3VGeFRGLa0ULZ0UCaTMWwREREREZFWlxexQQYREREREZEBMGwREREREREZAMMWERERERGRATBsERERERERGQDDFhERERERkQEwbBERERERERkAwxYREREREZEBMGwREREREREZAMMWERERERGRAZgauwDSTYlKxMn4NKRm5cPF1gIdfB1gInn83auJiIiIiOjZYtiqQcKikrFgWwySM/PV29zlFpg32A/9/d2NWBkRERERET2MywhriLCoZEz6+axG0AIARWY+Jv18FmFRyUaqjIiIiIiIKsOwVQOUqEQs2BYDsZJ9ZdsWbItBiaqyEUREREREZAwMWzXAyfi0CjNa5YkAkjPzcTI+7dkVRUREREREj8SwVQOkZlUdtJ5kHBERERERGR7DVg3gYmuh13FERERERGR4DFs1QAdfB7jLLVBVg3cBpV0JO/g6PMuyiIiIiIjoERi2agATiYB5g/0AoELgKns+b7Af77dFRERERFSNMGzVEP393bHmlbZwk2suFXS2lWLNK215ny0iIiIiomqGNzWuQfr7u6OvnxtOxqfho78v4VpqDsZ19WXQIiIiIiKqhjizVcOYSAQENXTEa0E+AIDd0QrjFkRERERERJVi2KqhQlq4AQDOJmYgOTPPyNUQEREREdHDjBq2fHx8IAhChcfkyZMBAPn5+Zg8eTIcHR1hY2ODIUOGICUlReMciYmJGDhwIKysrODi4oJZs2ahuLhYY8yBAwfQtm1bSKVSNGrUCBs2bHhWb9FgXGUWaOdtDwDYHcXZLSIiIiKi6saoYevUqVNITk5WP8LDwwEAw4YNAwBMnz4d27Ztw59//omDBw/izp07eOmll9THl5SUYODAgSgsLMSxY8ewceNGbNiwAR9//LF6THx8PAYOHIjg4GCcP38e06ZNw/jx47F79+5n+2YNIDSg9FqtnQxbRERERETVjiCKomjsIspMmzYN27dvR1xcHJRKJZydnbFp0yYMHToUABAbG4vmzZsjMjISnTp1wq5duzBo0CDcuXMHrq6uAIC1a9di9uzZuHv3LszNzTF79mzs2LEDUVFR6tcZMWIEMjIyEBYWplVdSqUScrkcmZmZkMlk+n/jT+h2Rh66LI6A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a3FUfbnKLBDoZQ8A2M2lhEREREREFegctu7fv4/evXujSZMmGDBgAJKTS5eRjRs3DjNnztR7gVR9hQaUdiXcybBFRERERFSBzmFr+vTpMDMzQ2JiIqysrNTb/+///g9hYWF6LY6qt/7+pddtnbqZhtSsfCNXQ0RERERUvegctvbs2YMlS5agfv36GtsbN27M1u91TD07S7TytIMoAnuiU4xdDhERERFRtaJz2MrJydGY0SqTlpYGqVSql6Ko5hjgz66ERERERESV0TlsdevWDT/99JP6uSAIUKlUWLp0KYKDg/VaHFV/of6l120dv5GGtJxCI1dDRERERFR9mOp6wNKlS9G7d2+cPn0ahYWFeO+99xAdHY20tDQcPXrUEDVSNeblaIUWHjJE31EiPEaB/2vvZeySiIiIiIiqBZ1ntvz9/XH16lV07doVzz//PHJycvDSSy/h3LlzaNiwoSFqpGou9MFSwp2X2JWQiIiIiKiMTjNbRUVF6N+/P9auXYsPPvjAUDVRDRMa4I7/7LmKY9fvITO3CHIrM2OXRERERERkdDrNbJmZmeHixYuGqoVqqIbONmjqaouiEhF7L7MrIRERERER8ATLCF955RV8//33hqiFarD+6q6EXEpIRERERAQ8QYOM4uJi/PDDD9i7dy8CAwNhbW2tsX/58uV6K45qjgEB7lixLw6H4u4iK78IthZcSkhEREREdZvOYSsqKgpt27YFAFy9elVjnyAI+qmKapwmrjZo4GSNG/dyEBGbiudb1zN2SURERERERqVz2Nq/f78h6qAaThAEhAa4YdX+6wiLUjBsEREREVGdp/M1W0RVKbvB8f4rqcgtLDZyNURERERExqXzzBYAnD59Gn/88QcSExNRWFiose+vv/7SS2FU87TwkMHTwRJJaXk4eOUuQgPcjV0SEREREZHR6Dyz9dtvv6Fz5864fPkytmzZgqKiIkRHRyMiIgJyudwQNVINIQgCBjyY3drJroREREREVMfpHLYWLlyIL7/8Etu2bYO5uTlWrFiB2NhYDB8+HF5eXoaokWqQshbwEZdTkF9UYuRqiIiIiIiMR+ewdf36dQwcOBAAYG5ujpycHAiCgOnTp2PdunV6L5BqltaedvCQWyCnsASH4+4ZuxwiIiIiIqPROWzZ29sjKysLAFCvXj1ERUUBADIyMpCbm6vTuebPnw9B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xowZcHBwgEwmw9tvv42goCB06tQJANCvXz/4+fnh1VdfxdKlS6FQKPDhhx9i8uTJ6mWAEydOxDfffIP33nsPY8eORUREBP744w/s2LFD17dORmQtNUWPJs7YE5OCsKhk+HnIjF0SEREREdEj6Ry2tmzZovG8qKgI586dw8aNG7FgwQK9FQYAX375JSQSCYYMGYKCggKEhIRg9erV6v0mJibYvn07Jk2ahKCgIFhbW2P06NH45JNP1GN8fX2xY8cOTJ8+HStWrED9+vXx3Xff8R5bNdCAAHfsiUnBzigFZvRrauxyiIiIiIgeSRD11Et706ZN+P333/H333/r43TVilKphFwuR2ZmJmQyzqgYizK/CO0+3YvCEhXCp3dHY1dbY5dERERERHWMLtlAb9dsderUqcK1UUT6JLMwQ9fGTgBK77lFRERERFSd6SVs5eXlYeXKlahXr54+TkdUpVD/0i6TOy8lG7kSIiIiIqJH0/maLXt7e40GGaIoIisrC1ZWVvj555/1WhzRw/r6ucJUIiBWkYX4eznwdbI2dklERERERJXSOWx99dVXGs8lEgmcnZ3RsWNH2Nvb66suokrZWZkjqKEjDsfdw66oZLzVs5GxSyIiIiIiqpTOYWv06NGGqINIawMC3EvD1iUFwxYRERERVVtaX7N17949JCQkaGyLjo7G66+/juHDh2PTpk16L46oMv38XCERgEu3M5GUlmvscoiIiIiIKqV12Hr77bexcuVK9fPU1FR069YNp06dQkFBAcaMGYP//ve/BimSqDxHGyk6+joCAMLYlZCIiIiIqimtw9bx48fx3HPPqZ//9NNPcHBwwPnz5/H3339j4cKFWLVqlUGKJHpYaEBpV8JdUexKSERERETVk9ZhS6FQwMfHR/08IiICL730EkxNSy/7eu655xAXF6f3AokqE9LCDYIAnE3MQHJmnrHLISIiIiKqQOuwJZPJkJGRoX5+8uRJdOzYUf1cEAQUFBTotTiiqrjKLNDOu7T75W4uJSQiIiKiakjrsNWpUyesXLkSKpUKmzdvRlZWFnr16qXef/XqVXh6ehqkSKLK9Pd3BwDsZNgiIiIiompI67D16aef4p9//oGlpSX+7//+D++9957GfbV+++039OjRwyBFElWmv3/pdVunbqYhNSvfyNUQEREREWnS+j5bLVu2xOXLl3H06FG4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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 2\n",
        "#Contains 10 fold cross validation\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_predict, KFold\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 3  # Placeholder for the optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Setting up 10-fold cross-validation\n",
        "kf = KFold(n_splits=10, shuffle=True, random_state=42)\n",
        "\n",
        "# Predicting across each fold using cross-validation\n",
        "y_pred = cross_val_predict(SVC(random_state=42), X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Calculating and printing accuracy\n",
        "accuracy = accuracy_score(y, y_pred)\n",
        "print(f\"Cross-validated accuracy: {accuracy}\")\n",
        "\n",
        "# Generating and plotting the confusion matrix\n",
        "conf_matrix = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for SVM Classifier Using 10-Fold Cross-Validation')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "LlN4sag5Ba6R",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "outputId": "5a2664f7-eb1b-485c-d202-4d3537fe301a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validated accuracy: 0.98125\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "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ERHy8vIyPf/WrVsrICBAJ06cSPd5pXVpHT16VN98840thrQui1OnTql3794KDg6Wl5eXatSooXnz5tntI+38vP3225oyZYrtvbVv3750j/nnn39Kkho2bGha5+7ubvuL3dvbWx07dtS6det06tQp07YLFy5U4cKF9cgjj9i133XXXWrSpIkWLlxo175gwQJVq1ZNVatWTTeuG2X1s3WjzLwH0kybNk1VqlRRwYIFFRAQoDp16tjFf/HiRQ0ZMkSlS5eW1WpVsWLF9MADD2jXrl22bf77mbvZec3o83TgwAF17txZgYGB8vLyUp06dfTVV1/ZbfPxxx/LYrFo48aNGjBggIoVK5bjlaLsXA969uwpHx8f/fvvv+rQoYN8fHxUtGhRDRs2TCkpKXb7P3v2rJ588knbMIeIiAj9+uuvmR7nmNkq3tKlS1W3bl27KmDFihXVokULLV68OFP7yIxffvlFbdq0ka+vr3x8fNSiRQtt2bIlU499//33VaZMGXl7e+vee+/Vjz/+mKnH/fPPP5o9e7YeeOCBdMcvu7u7a9iwYbb3Rtp1eN++ferevbsCAgLUqFEjSZn/TtqxY4dat26tIkWKyNvbW+Hh4Xr66afttlm0aJFq166twoULy9fXV9WqVdO7776b4fPIyjUmK5/nG6X3vZeUlKShQ4eqaNGitmP8888/psceO3ZMAwYMUIUKFeTt7a2goCA99thjdt3KH3/8sR577DFJUvPmzW2f97QxqOmNSczqtT3tvWK1WlW3bl1t3779ls8b9pzyZ8LXX3+tu+++Ww0aNMjU9n369NG8efPUuXNnvfDCC9q6dauioqK0f/9+LVu2zG7bw4cPq3Pnzurdu7ciIiL00UcfqWfPnqpdu7aqVKmijh07yt/fX0OHDlW3bt300EMPycfHJ0vx7927V23btlX16tU1btw4Wa1WHT58WD///PNNH/f999+rTZs2uvvuuzVmzBglJiZq2rRpatiwoXbt2mW6kHfp0kXh4eGKiorSrl279MEHH6hYsWJ68803MxVnx44d9cwzz+jLL7+0XZgWLlyoihUr6p577jFtf+TIES1fvlyPPfaYwsPDFRsbq9mzZ6tp06bat2+fwsLCVKlSJY0bN06jRo1Sv3791LhxY0myO5dnz55VmzZt1LVrVz3xxBMKDg5ON753331X69evV0REhKKj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ry5dutiqVmfOnNHZs2fVunVrHTp0SP/++6/dY/r27St3d/ccjyU714P/Su9z/t/r1apVq+Th4aG+ffva2tzc3DRw4MDsBZyBtLverVaraV3aeMrM3hk/atQorV271m4JCQlRSkqK1qxZow4dOujuu++2bR8aGqru3bvrp59+yvD6tmPHDp06dUrPPPOM3Xi1nj17ys/P75YxZffzceP5yex3Utr7YuXKlUpOTk533/7+/kpISNDatWuzFFNmrzE5dU2X/u95Dx482K49va77//aUJCcn6+zZsypbtqz8/f2zfNz/Hj8r1/bHH39cAQEBtn+n5QU5mQu4glxPEn19fSXpprfv/9exY8fk5uamsmXL2rWHhITI399fx44ds2svWbKkaR8BAQE6f/58NiM2e/zxx9WwYUP16dNHwcHB6tq1qxYvXnzTL4i0OCtUqGBaV6lSJZ05c8bUBXbjc0l7w2fluTz00EMqXLiwPv/8cy1YsEB169Y1vZZpUlNTNXnyZJUrV05Wq1VFihRR0aJFtWfPHsXHx2f6mHfddVeWBh2//fbbCgwM1O7duzV16lQVK1Ys04+90bFjx1SuXDnbhTFNWhfGje+X8PDwTO/barXq1Vdf1f79+3XixAl99tlnuu+++0xdPpJsg8bTxuj9888/+vHHH9W1a9ebJirdu3fX2rVrdfz4cS1fvjzDhD49Wf1spSez74Hhw4fLx8dH9957r8qVK6eBAweaulcnTpyo33//XSVKlNC9996rMWPG5NgF+vDhwzIMQyNHjlTRokXtlrS7om8cr5WVc50V2bkepPHy8jL9kXLj9erYsWMKDQ1VwYIF7bbL6HOcXWlf7DeOq5NkG+6Qtk1MTIzdcmPyWK1aNbVs2dJu8fLy0unTp3X58uUMr4Opqan6+++/040v7bNbrlw5u3YPDw+7hDMj2f183Pi+yex3UtOmTdWpUyeNHTtWRYoUUfv27TV37ly713fAgAEqX7682rRpo+LFi+vpp5/WqlWrbOtTUlJMr/XVq1clZe4ak1PX9P8+7zJlyti1p3cuExMTNWrUKJUoUcLuuHFxcVk+7n+Pn5Vre058f8JJSWJYWJh+//33LD0us/OSZfQFbPz/sSTZOcaNg8i9vb21adMmff/993ryySe1Z88ePf7443rggQdM296O23kuaaxWqzp27Kh58+Zp2bJl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1ahRQz4+Pvr++++1fft2TZo0KVvP7UbvvfeeGjVqpGrVqqlv3766++67FRsbq+joaP3zzz+ZmgsuI++8845at26tmjVrqmfPngoLC9P+/fv1/vvvKzQ0VCNGjLBtm93rQWZ16NBB9957r1544QUdPnxYFStW1FdffWVLTjNTjZk/f76OHTtmq0Zu2rRJ48ePlyQ9+eSTtirMgAEDNGfOHD388MMaNmyYPDw89M477yg4ONh2Y8btGj9+vG1eyQEDBqhAgQKaPXu2kpKSbvqZ9/Dw0Pjx49W/f3/df//9evzxx3X06FHNnTs3U2MSJWnSpEn6888/NXjwYH355Zdq27atAgICdPz4cS1ZskQHDhy45c8HZvY7ad68eZoxY4YeffRRlSlTRhcvXtScOXPk6+trSzT79Omjc+fO6f7771fx4sV17NgxTZs2TTVr1sxwKpj/utU1JrOf58yoWbOmunXrphkzZig+Pl4NGjTQunXr0q1ot23bVvPnz5efn58qV66s6Ohoff/996ZfgKlZs6bc3d315ptvKj4+XlarVffff3+649IddW3HLTjnpurr/vjjD6Nv375G6dKlDU9PT6Nw4cJGw4YNjWnTptlNa5GcnGyMHTvWCA8PNzw8PIwSJUoYI0aMsNvGMNKfOsMwzLfSZzQFjmEYxpo1a4yqVasanp6eRoUKFYxPP/3UNBXAunXrjPbt2xthYWGGp6enERYWZnTr1s34448/TMe4cXqK77//3mjYsKHh7e1t+Pr6Gu3atTP27dtnt01G052kTeWRNpVERv47BU5GMpoC54UXXjBCQ0MNb29vo2HDhkZ0dHS6U9esWLHCqFy5slGgQAG759m0adMMp0b5734uXLhglCpVyrjnnnuM5ORku+2GDh1quLm5GdHR0Td9Dhmd79jYWKNXr15GkSJFDE9PT6NatWqm83Cz90B6YmNjjTfeeMNo2rSpERoaahQoUMAICAgw7r//fmPp0qUZPi5t6pB77703w230/6fAuZnMTIHzX5n9bKU3BU5m3gOzZ882mjRpYgQFBRlWq9UoU6aM8eKLLxrx8fGGYRhGUlKS8eKLLxo1atQwChcubBQqVMioUaOGMWPGDLs4b2cKHMMwjD///NN46qmnjJCQEMPDw8O46667jLZt29qdk7TPzc2mIknPli1bjLZt2xoBAQFGgQIFjLvu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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 2.1\n",
        "#Contains 10 fold cross validation\n",
        "#Hyperparameter tuning\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_predict, KFold, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 3  # Placeholder for the optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Define the parameter grid for hyperparameter tuning\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10, 100],\n",
        "    'gamma': [1, 0.1, 0.01, 0.001, 'scale'],\n",
        "    'kernel': ['rbf', 'linear', 'poly', 'sigmoid']\n",
        "}\n",
        "\n",
        "# Initialize the GridSearchCV object with 10-fold cross-validation\n",
        "grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=10, scoring='accuracy', verbose=1)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_with_clusters, y)\n",
        "\n",
        "# Best parameters and score\n",
        "print(\"Best parameters found:\", grid_search.best_params_)\n",
        "print(\"Best cross-validated score:\", grid_search.best_score_)\n",
        "\n",
        "# Using the best model found by grid search to predict\n",
        "best_model = grid_search.best_estimator_\n",
        "y_pred = cross_val_predict(best_model, X_with_clusters, y, cv=10)\n",
        "\n",
        "# Calculating and printing accuracy\n",
        "accuracy = accuracy_score(y, y_pred)\n",
        "print(f\"Cross-validated accuracy with hyperparameter tuning: {accuracy}\")\n",
        "\n",
        "# Generating and plotting the confusion matrix\n",
        "conf_matrix = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for SVM Classifier with Hyperparameter Tuning')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 633
        },
        "id": "jz1sZcBOB0Z5",
        "outputId": "d221c1ee-5938-41ce-aa1a-b39cba93bba0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 10 folds for each of 80 candidates, totalling 800 fits\n",
            "Best parameters found: {'C': 1, 'gamma': 1, 'kernel': 'linear'}\n",
            "Best cross-validated score: 1.0\n",
            "Cross-validated accuracy with hyperparameter tuning: 1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 2.2\n",
        "#Contains 10 fold cross validation\n",
        "#Post processing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_predict, KFold\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Applying K-Means clustering\n",
        "optimal_num_clusters = 3  # Placeholder for the optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Setting up 10-fold cross-validation\n",
        "kf = KFold(n_splits=10, shuffle=True, random_state=42)\n",
        "\n",
        "# Predicting across each fold using cross-validation\n",
        "y_pred = cross_val_predict(SVC(random_state=42), X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Post-processing with a median filter of kernel size 3\n",
        "y_pred_smoothed = medfilt(y_pred, kernel_size=3)\n",
        "\n",
        "# Calculating and printing accuracy before and after post-processing\n",
        "accuracy_before = accuracy_score(y, y_pred)\n",
        "accuracy_after = accuracy_score(y, y_pred_smoothed)\n",
        "print(f\"Cross-validated accuracy before post-processing: {accuracy_before}\")\n",
        "print(f\"Cross-validated accuracy after post-processing: {accuracy_after}\")\n",
        "\n",
        "# Generating and plotting the confusion matrix before post-processing\n",
        "conf_matrix_before = confusion_matrix(y, y_pred)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix Before Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "# Generating and plotting the confusion matrix after post-processing\n",
        "conf_matrix_after = confusion_matrix(y, y_pred_smoothed)\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix After Post-Processing')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "qSplvkCEB0nK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "9343a99f-c52a-452d-9959-5effaeb9b6e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validated accuracy before post-processing: 0.98125\n",
            "Cross-validated accuracy after post-processing: 0.9958333333333333\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#SVM and K-means clustering\n",
        "#CODE VERSION 2.3\n",
        "#Contains 10 fold cross validation\n",
        "#Hyperparameter tuning and Post Processing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import KFold, GridSearchCV, cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, silhouette_score\n",
        "from scipy.signal import medfilt\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Filling NaN values with mean for numerical columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "# Standardizing the numerical features\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Elbow method for optimal number of clusters\n",
        "sse = []\n",
        "silhouette_scores = []\n",
        "k_range = range(2, 11)  # Considering k values from 2 to 10\n",
        "random_state = 42  # For reproducibility\n",
        "\n",
        "# Multiple runs to average results\n",
        "num_runs = 10  # Number of runs to average\n",
        "for k in k_range:\n",
        "    sse_runs = []\n",
        "    silhouette_scores_runs = []\n",
        "    for _ in range(num_runs):\n",
        "        kmeans = KMeans(n_clusters=k, n_init=10, random_state=random_state)\n",
        "        kmeans.fit(X_scaled)\n",
        "        sse_runs.append(kmeans.inertia_)\n",
        "        silhouette_avg = silhouette_score(X_scaled, kmeans.labels_)\n",
        "        silhouette_scores_runs.append(silhouette_avg)\n",
        "    sse.append(np.mean(sse_runs))\n",
        "    silhouette_scores.append(np.mean(silhouette_scores_runs))\n",
        "\n",
        "# Plotting the elbow plot\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(k_range, sse, marker='o')\n",
        "plt.title('Elbow Method For Optimal k')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('Sum of squared distances')\n",
        "\n",
        "# Plotting the silhouette plot\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(k_range, silhouette_scores, marker='o')\n",
        "plt.title('Silhouette Scores For Optimal k')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('Silhouette Score')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Assuming optimal number of clusters from the above plots\n",
        "optimal_num_clusters = 2\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=random_state)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Including cluster labels with the features\n",
        "X_with_clusters = np.hstack((X_scaled, clusters.reshape(-1, 1)))\n",
        "y = df['Road_Surface_Type'].values\n",
        "\n",
        "# Define hyperparameters grid for tuning\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10, 100],\n",
        "    'gamma': ['scale', 0.1, 0.01, 0.001],\n",
        "    'kernel': ['rbf', 'linear', 'poly', 'sigmoid']\n",
        "}\n",
        "\n",
        "# Setting up 10-fold cross-validation\n",
        "kf = KFold(n_splits=10, shuffle=True, random_state=random_state)\n",
        "\n",
        "# Initialize GridSearchCV\n",
        "grid_search = GridSearchCV(SVC(random_state=random_state), param_grid, cv=kf, scoring='accuracy', verbose=1)\n",
        "\n",
        "# Fit GridSearchCV\n",
        "grid_search.fit(X_with_clusters, y)\n",
        "\n",
        "# Best parameters and model\n",
        "print(\"Best parameters found:\", grid_search.best_params_)\n",
        "print(\"Best cross-validated score:\", grid_search.best_score_)\n",
        "\n",
        "# Predicting with the best model\n",
        "best_model = grid_search.best_estimator_\n",
        "y_pred = cross_val_predict(best_model, X_with_clusters, y, cv=kf)\n",
        "\n",
        "# Post-processing with a median filter of kernel size 3\n",
        "y_pred_smoothed = medfilt(y_pred, kernel_size=3)\n",
        "\n",
        "# Calculating and printing accuracy before and after post-processing\n",
        "accuracy_before = accuracy_score(y, y_pred)\n",
        "accuracy_after = accuracy_score(y, y_pred_smoothed)\n",
        "print(f\"Cross-validated accuracy before post-processing: {accuracy_before}\")\n",
        "print(f\"Cross-validated accuracy after post-processing: {accuracy_after}\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 594
        },
        "id": "nglmJk9BB1Oh",
        "outputId": "06bea07c-06b2-4cff-b18a-54ea56e2ac92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 10 folds for each of 64 candidates, totalling 640 fits\n",
            "Best parameters found: {'C': 1, 'gamma': 'scale', 'kernel': 'linear'}\n",
            "Best cross-validated score: 1.0\n",
            "Cross-validated accuracy before post-processing: 1.0\n",
            "Cross-validated accuracy after post-processing: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Sgt6Al-N8-CC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vclIjSCtEgsP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "P5HRyU_1HkK0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "outputId": "41db24c9-939c-481e-c916-21816992ce5a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'C': 0.1, 'gamma': 'scale', 'kernel': 'linear'}\n",
            "Best cross-validation accuracy: 0.9270833333333334\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#CODE VERSION 3\n",
        "#Contains 10 fold cross validation\n",
        "#Contains hyperparameter tuning\n",
        "#Contains basic SVM with placeholder value for the optimal number of k clusters\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_score, cross_val_predict, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Creating a copy of the dataframe to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# K-Means Clustering\n",
        "optimal_num_clusters = 3  # Placeholder value; you need to determine the optimal number\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# SVM Classification\n",
        "y = df['Road_Surface_Type']  # The actual labels you want to predict\n",
        "svm_model = SVC(kernel='linear', random_state=42)\n",
        "\n",
        "# Hyperparameter grid for SVM\n",
        "param_grid = {\n",
        "    'C': [0.1],  # For linear kernel\n",
        "    'gamma': ['scale', 0.1],  # For RBF kernel\n",
        "    'kernel': ['linear']\n",
        "}\n",
        "\n",
        "# Grid search with cross-validation\n",
        "grid_search = GridSearchCV(SVC(random_state=42), param_grid, cv=10, scoring='accuracy')\n",
        "grid_search.fit(X_scaled, y)\n",
        "\n",
        "# Print the best parameters and the corresponding accuracy\n",
        "print(f\"Best parameters: {grid_search.best_params_}\")\n",
        "print(f\"Best cross-validation accuracy: {grid_search.best_score_}\")\n",
        "\n",
        "# Train the SVM model with the best parameters\n",
        "best_svm_model = grid_search.best_estimator_\n",
        "\n",
        "# Get cross-validated predictions for confusion matrix\n",
        "predictions = cross_val_predict(best_svm_model, X_scaled, y, cv=10)\n",
        "\n",
        "# Confusion matrix calculation\n",
        "conf_matrix = confusion_matrix(y, predictions)\n",
        "\n",
        "# Confusion matrix plot\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for SVM Classifier')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 3.1\n",
        "#Contains 10 fold cross validation\n",
        "#No hyperparameter tuning\n",
        "#No post-processing\n",
        "#Contains silhouette and elbow plot to determine optimum number of clusters\n",
        "#Optimum number chosen as around 4\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_score, cross_val_predict\n",
        "from sklearn.metrics import silhouette_score, confusion_matrix\n",
        "import seaborn as sns\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# ... Elbow Method and Silhouette Method code remains the same ...\n",
        "\n",
        "# Perform k-means clustering with the optimal number of clusters\n",
        "optimal_num_clusters = 3  # This is the determined optimal number of clusters\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# SVM Classification\n",
        "y = df['Road_Surface_Type']\n",
        "svm_model = SVC(kernel='linear', random_state=42)\n",
        "\n",
        "# Get cross-validated predictions for confusion matrix\n",
        "predictions = cross_val_predict(svm_model, X_scaled, y, cv=10)\n",
        "\n",
        "# Print the accuracy\n",
        "accuracy = np.mean(predictions == y)\n",
        "print(f\"SVM Accuracy: {accuracy}\")\n",
        "\n",
        "# Confusion matrix calculation\n",
        "conf_matrix = confusion_matrix(y, predictions)\n",
        "\n",
        "# Confusion matrix plot\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title('Confusion Matrix for SVM Classifier')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "sJYc5wQzT1V_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616
        },
        "outputId": "3c6980e4-d5c8-4b81-f77e-05a7a1c495ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVM Accuracy: 0.9270833333333334\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 3.2\n",
        "#Contains 10 fold cross validation\n",
        "#Optimal number of clusters found to be about 3\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_predict, cross_val_score\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Creating a copy of the dataframe to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# K-Means Clustering\n",
        "optimal_num_clusters = 3  # Assuming optimal number of clusters is 3\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# SVM Classification with previously optimized parameters\n",
        "svm_model = SVC(C=0.1, gamma='scale', kernel='linear', random_state=42)\n",
        "\n",
        "# Perform 10-fold cross-validation with the optimized SVM model\n",
        "svm_scores = cross_val_score(svm_model, X_scaled, df['Road_Surface_Type'], cv=10)\n",
        "\n",
        "# Print the accuracy for each fold with the optimized SVM model\n",
        "print(f\"Optimized SVM Accuracy for each fold: {svm_scores}\")\n",
        "\n",
        "# Print the mean accuracy across all folds with the optimized SVM model\n",
        "print(f\"Optimized SVM Mean Accuracy: {np.mean(svm_scores)}\")\n",
        "\n",
        "# Get cross-validated predictions for confusion matrix\n",
        "predictions = cross_val_predict(svm_model, X_scaled, df['Road_Surface_Type'], cv=10)\n",
        "\n",
        "# Confusion matrix calculation\n",
        "conf_matrix = confusion_matrix(df['Road_Surface_Type'], predictions)\n",
        "\n",
        "# Confusion matrix plot\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix for SVM Classifier')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "xW6x_jFAVJw9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616
        },
        "outputId": "1dd82797-5c34-4bbe-d73e-f2afb913ad2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimized SVM Accuracy for each fold: [0.875      0.95833333 0.89583333 0.9375     0.9375     0.97916667\n",
            " 0.97916667 0.89583333 0.9375     0.875     ]\n",
            "Optimized SVM Mean Accuracy: 0.9270833333333334\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 4\n",
        "#Contains 10 fold cross Validation\n",
        "#Contains optimum number of k clusters\n",
        "#Also contains hyperparameter tuning\n",
        "#SVM and K-means clustering\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Creating a copy of the dataframe to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# K-Means Clustering\n",
        "optimal_num_clusters = 3  # Placeholder value; you need to determine the optimal number\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# SVM Classification with Hyperparameter Tuning\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10],\n",
        "    'gamma': ['scale', 'auto'],\n",
        "    'kernel': ['linear', 'rbf', 'poly']\n",
        "}\n",
        "\n",
        "# Exclude 'cluster' column for SVM features\n",
        "svm_features = X.drop('cluster', axis=1)\n",
        "\n",
        "# Standardize SVM features\n",
        "svm_features_scaled = scaler.transform(svm_features)\n",
        "\n",
        "svm_model = SVC(random_state=42)\n",
        "\n",
        "# Instantiate the grid search model\n",
        "grid_search = GridSearchCV(estimator=svm_model, param_grid=param_grid, cv=10, n_jobs=-1, verbose=2)\n",
        "\n",
        "# Perform the grid search\n",
        "grid_search.fit(svm_features_scaled, df['Road_Surface_Type'])\n",
        "\n",
        "# Retrieve the best parameters and model\n",
        "best_params = grid_search.best_params_\n",
        "print(\"Best hyperparameters:\", best_params)\n",
        "\n",
        "# Using the best parameters from the grid search for the optimized SVM model\n",
        "optimized_svm_model = SVC(**best_params, random_state=42)\n",
        "\n",
        "# Get cross-validated predictions with the optimized SVM model\n",
        "predictions = cross_val_predict(optimized_svm_model, svm_features_scaled, df['Road_Surface_Type'], cv=10)\n",
        "\n",
        "# Calculate and print the mean accuracy\n",
        "mean_accuracy = accuracy_score(df['Road_Surface_Type'], predictions)\n",
        "print(f\"Mean Accuracy: {mean_accuracy}\")\n",
        "\n",
        "# Confusion matrix and visualization\n",
        "conf_matrix = confusion_matrix(df['Road_Surface_Type'], predictions)\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.xlabel(\"Predicted Label\")\n",
        "plt.ylabel(\"True Label\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "-MjvulI7ZpQC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "outputId": "f8173237-a8d1-4c5c-a8fe-334be53b7f31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 10 folds for each of 18 candidates, totalling 180 fits\n",
            "Best hyperparameters: {'C': 10, 'gamma': 'auto', 'kernel': 'poly'}\n",
            "Mean Accuracy: 0.95\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 5 - SVM and K-means clstering\n",
        "#Contains 10 fold cross validation\n",
        "#Contains optimum number of k clusters\n",
        "#Contains hyperparameter tuning\n",
        "#Contains post-processing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Creating a copy of the dataframe to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# K-Means Clustering\n",
        "optimal_num_clusters = 3  # Placeholder value; you need to determine the optimal number\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# SVM Classification with Hyperparameter Tuning\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10],\n",
        "    'gamma': ['scale', 'auto'],\n",
        "    'kernel': ['linear', 'rbf', 'poly']\n",
        "}\n",
        "\n",
        "# Exclude 'cluster' column for SVM features\n",
        "svm_features = X.drop('cluster', axis=1)\n",
        "\n",
        "# Standardize SVM features\n",
        "svm_features_scaled = scaler.transform(svm_features)\n",
        "\n",
        "svm_model = SVC(random_state=42)\n",
        "\n",
        "# Instantiate the grid search model\n",
        "grid_search = GridSearchCV(estimator=svm_model, param_grid=param_grid, cv=10, n_jobs=-1, verbose=2)\n",
        "\n",
        "# Perform the grid search\n",
        "grid_search.fit(svm_features_scaled, df['Road_Surface_Type'])\n",
        "\n",
        "# Retrieve the best parameters and model\n",
        "best_params = grid_search.best_params_\n",
        "print(\"Best hyperparameters:\", best_params)\n",
        "\n",
        "# Using the best parameters from the grid search for the optimized SVM model\n",
        "optimized_svm_model = SVC(**best_params, random_state=42)\n",
        "\n",
        "# Get cross-validated predictions with the optimized SVM model\n",
        "predictions = cross_val_predict(optimized_svm_model, svm_features_scaled, df['Road_Surface_Type'], cv=10)\n",
        "\n",
        "# Post-processing with a median filter to smooth predictions\n",
        "smoothed_predictions = medfilt(predictions, kernel_size=5)\n",
        "\n",
        "# Calculate and print the mean accuracy before and after post-processing\n",
        "mean_accuracy_before = accuracy_score(df['Road_Surface_Type'], predictions)\n",
        "mean_accuracy_after = accuracy_score(df['Road_Surface_Type'], smoothed_predictions)\n",
        "print(f\"Mean Accuracy before post-processing: {mean_accuracy_before}\")\n",
        "print(f\"Mean Accuracy after post-processing: {mean_accuracy_after}\")\n",
        "\n",
        "# Confusion matrix and visualization\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Confusion matrix before post-processing\n",
        "conf_matrix_before = confusion_matrix(df['Road_Surface_Type'], predictions)\n",
        "\n",
        "# Confusion matrix after post-processing\n",
        "conf_matrix_after = confusion_matrix(df['Road_Surface_Type'], smoothed_predictions)\n",
        "\n",
        "fig, ax = plt.subplots(1, 2, figsize=(14, 7))\n",
        "\n",
        "# Before post-processing\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax[0])\n",
        "ax[0].set_title(\"Confusion Matrix Before Post-Processing\")\n",
        "ax[0].set_xlabel(\"Predicted Label\")\n",
        "ax[0].set_ylabel(\"True Label\")\n",
        "\n",
        "# After post-processing\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax[1])\n",
        "ax[1].set_title(\"Confusion Matrix After Post-Processing\")\n",
        "ax[1].set_xlabel(\"Predicted Label\")\n",
        "ax[1].set_ylabel(\"True Label\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 776
        },
        "id": "jRzxQBvKaA2X",
        "outputId": "93fe0bfe-e597-4287-9dc9-8a737cbc9f3e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 10 folds for each of 18 candidates, totalling 180 fits\n",
            "Best hyperparameters: {'C': 10, 'gamma': 'auto', 'kernel': 'poly'}\n",
            "Mean Accuracy before post-processing: 0.95\n",
            "Mean Accuracy after post-processing: 0.9895833333333334\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CODE VERSION 6\n",
        "#Contains 5 fold cross validation instead\n",
        "#Contains optimum number of k clusters\n",
        "#Contains hyperparameter tuning\n",
        "#Contains post-processing\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score\n",
        "from scipy.signal import medfilt\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "file_path = 'Aggregate data for surfaces (120 each).csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# Calculate the mean of numeric columns only and fill NaN values for these columns\n",
        "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
        "df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n",
        "\n",
        "features = ['RMS', 'Min', 'Max', 'Average', '20th Percentile', '50th Percentile',\n",
        "            '80th percentile', 'Q1', 'Q3', 'IQR', 'Standard Deviation', 'Skew', 'Kurtosis']\n",
        "\n",
        "# Creating a copy of the dataframe to avoid SettingWithCopyWarning\n",
        "X = df[features].copy()\n",
        "\n",
        "# Standardize features before k-means clustering\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# K-Means Clustering\n",
        "optimal_num_clusters = 3  # Placeholder value; you need to determine the optimal number\n",
        "kmeans = KMeans(n_clusters=optimal_num_clusters, n_init=10, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_scaled)\n",
        "\n",
        "# Add the cluster labels to the DataFrame\n",
        "X['cluster'] = clusters\n",
        "\n",
        "# SVM Classification with Hyperparameter Tuning\n",
        "param_grid = {\n",
        "    'C': [0.1, 1, 10],\n",
        "    'gamma': ['scale', 'auto'],\n",
        "    'kernel': ['linear', 'rbf', 'poly']\n",
        "}\n",
        "\n",
        "# Exclude 'cluster' column for SVM features\n",
        "svm_features = X.drop('cluster', axis=1)\n",
        "\n",
        "# Standardize SVM features\n",
        "svm_features_scaled = scaler.transform(svm_features)\n",
        "\n",
        "svm_model = SVC(random_state=42)\n",
        "\n",
        "# Instantiate the grid search model with 5-fold CV\n",
        "grid_search = GridSearchCV(estimator=svm_model, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)\n",
        "\n",
        "# Perform the grid search\n",
        "grid_search.fit(svm_features_scaled, df['Road_Surface_Type'])\n",
        "\n",
        "# Retrieve the best parameters and model\n",
        "best_params = grid_search.best_params_\n",
        "print(\"Best hyperparameters:\", best_params)\n",
        "\n",
        "# Using the best parameters from the grid search for the optimized SVM model\n",
        "optimized_svm_model = SVC(**best_params, random_state=42)\n",
        "\n",
        "# Get cross-validated predictions with the optimized SVM model using 5-fold CV\n",
        "predictions = cross_val_predict(optimized_svm_model, svm_features_scaled, df['Road_Surface_Type'], cv=5)\n",
        "\n",
        "# Post-processing with a median filter to smooth predictions\n",
        "smoothed_predictions = medfilt(predictions, kernel_size=5)\n",
        "\n",
        "# Calculate and print the mean accuracy before and after post-processing\n",
        "mean_accuracy_before = accuracy_score(df['Road_Surface_Type'], predictions)\n",
        "mean_accuracy_after = accuracy_score(df['Road_Surface_Type'], smoothed_predictions)\n",
        "print(f\"Mean Accuracy before post-processing: {mean_accuracy_before}\")\n",
        "print(f\"Mean Accuracy after post-processing: {mean_accuracy_after}\")\n",
        "\n",
        "# Confusion matrix and visualization\n",
        "# Confusion matrix before post-processing\n",
        "conf_matrix_before = confusion_matrix(df['Road_Surface_Type'], predictions)\n",
        "\n",
        "# Confusion matrix after post-processing\n",
        "conf_matrix_after = confusion_matrix(df['Road_Surface_Type'], smoothed_predictions)\n",
        "\n",
        "fig, ax = plt.subplots(1, 2, figsize=(14, 7))\n",
        "\n",
        "# Before post-processing\n",
        "sns.heatmap(conf_matrix_before, annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax[0])\n",
        "ax[0].set_title(\"Confusion Matrix Before Post-Processing\")\n",
        "ax[0].set_xlabel(\"Predicted Label\")\n",
        "ax[0].set_ylabel(\"True Label\")\n",
        "\n",
        "# After post-processing\n",
        "sns.heatmap(conf_matrix_after, annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax[1])\n",
        "ax[1].set_title(\"Confusion Matrix After Post-Processing\")\n",
        "ax[1].set_xlabel(\"Predicted Label\")\n",
        "ax[1].set_ylabel(\"True Label\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 776
        },
        "id": "RSr4qVSAaa0o",
        "outputId": "c1ced627-6e6c-4435-d935-7a5e201ce366",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 18 candidates, totalling 90 fits\n",
            "Best hyperparameters: {'C': 10, 'gamma': 'scale', 'kernel': 'poly'}\n",
            "Mean Accuracy before post-processing: 0.9479166666666666\n",
            "Mean Accuracy after post-processing: 0.9895833333333334\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
